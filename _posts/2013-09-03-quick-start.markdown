---
layout: post
title:  "С чего начать"
date:   2013-09-03 09:46:07
categories: jekyll update
---

## Установка

Для программирования на Haskell вам понадобится ваш любимый текстовый редактор и компилятор Haskell.
В данном курсе используется компилятор GHC как наиболее широко используемый, тем не менее, большинство
примеров и упражнений могут быть выполнены при помощи любого из используемых компиляторов.
Проще всего будет просто установить [Haskell Platform][haskell-platform], поскольку там будут сразу все
необходимые библиотеки вкупе с компилятором GHC.

GHC может как компилировать код из исходников, так и работать в интерактивном режиме. В интерактивном
режиме можно загружать файлы с кодом на Haskell и использовать определенные в них функции. Для обучения
рекомендуется использовать преимущественно интерактивный режим GHC.

[haskell-platform]: http://www.haskell.org/platform/

## Запускаем!

Итак, вы установили GHC и теперь можете приступить к знакомству. Для запуска в интерактивном режиме,
из командной строки выполните команду `ghci`:

```
$ ghci
GHCi, version 7.4.2: http://www.haskell.org/ghc/  :? for help
Loading package ghc-prim ... linking ... done.
Loading package integer-gmp ... linking ... done.
Loading package base ... linking ... done.
Prelude> 
```

Приглашение для ввода начинается с `Prelude> ` и по мере загрузки библиотек и внешних файлов будет расти
и сильно мешать. В примерах кода далее будет использоваться приглашение `ghci> `, которое можно выставить
следующим образом:

```
Prelude> :set prompt "ghci> "
ghci> 
```

Для начала, несколько простых арифметических примеров, не нуждающихся в пояснении:

```haskell
ghci> 14 + 2
16
ghci> 12 * 3
36
ghci> 125 / (7 - 2)
25.0
ghci> 5 * (-3)
-15
```

Работа с булевой алгеброй также не представляет труда. `True` и `False` представляют
соответственно **ИСТИНУ** и **ЛОЖЬ**, операторы `&&`, `||` и `not` соответствуют логическим
операторам **И**, **ИЛИ** и **НЕ** соответственно:

```haskell
ghci> True && False
False
ghci> False || (True && not False)
True
```

Проверка на равенство осуществляется при помощи операторов `==` и `/=`. Символ `/=` в Haskell испольуется
для большего сходства с реальным символом `≠`, используемым в математике. Для сравнения используются
привычные операторы ``<``, ``>``, ``<=``, ``>=``:

```haskell
ghci> 5 == 10
False
ghci> 6 > 3
True
ghci> True /= False
True
ghci> "string" == "long string"
False
ghci> (5 == 3) || (5 <= 10)
True
```


